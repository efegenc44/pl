import test2 (Nat (Zero, Succ), abo)
import testmodule (
    testfile::TestFileType (TestFileType),
    innermodule::innerfile2,
    innermodule::innerfile(gjgj, InnerType (InnerType))
)

func nat(Nat) -> Nat
    = x -> test2::Nat::Succ(x)

func foo(A) -> B
    = x -> B::foo(x)

func bar(TestFileType) -> TestFileType
    = x -> TestFileType()

func super(InnerType) -> InnerType
    = x -> abo(x)

type A = foo(B)
type B = foo(A)

func main() -> InnerType = ->
    abo(InnerType())

func main2() -> Nat = ->
    test2::add(
        Succ(Succ(Zero())),
        Succ(Succ(Succ(Succ(Zero()))))
    )

func a() -> innerfile2::InnerFileType2 = -> gjgj()

func test() -> Nat = ->
    let Zero()
        = Succ(Succ(m)) -> m
        | zero          -> zero

func add(Nat, Nat) -> Nat
    = n, Zero()  -> n
    | n, Succ(m) -> Succ(add(n, m))

