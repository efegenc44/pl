type List(T)
    = Nil
    | Cons(T, List(T))

type Tip = Tip
type A = A

type Either(L, R) = Left(L) | Right(R) | Empty

func main2() -> List(Tip) = ->
    List::Cons(Tip::Tip(), List::Cons(Tip::Tip(), List::Cons(Tip::Tip(), List::Nil())))

func main3() -> Either(Tip, A) = ->
    Either::Left(Tip::Tip())

func main4() -> List(Either(Tip, A)) = ->
    let List::Nil()
        = a -> a
        | List::Cons(f, h) -> List::Cons(Either::Left(Tip::Tip()), List::Nil())
        | List::Cons(f, h) -> List::Cons(Either::Right(A::A()), List::Nil())

func main5() -> Tip = ->
    id(Tip::Tip())

func fooo(Tip) -> A
    = t -> A::A()

func main() -> A = ->
    map(A::A(), id)

func main7() -> List(Tip) = ->
    foo(List::Cons(4, List::Nil()))

func id: T (T) -> T
    = a -> a

func foo: T, V (List(T)) -> List(V)
    = a -> List::Nil()

func map: G, H (G, func(G) -> H) -> H
    = t, f -> f(t)
